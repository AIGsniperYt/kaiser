const START_FEN="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",glyphs={K:"♔",Q:"♕",R:"♖",B:"♗",N:"♘",P:"♙",k:"♚",q:"♛",r:"♜",b:"♝",n:"♞",p:"♟"},PIECE_VALUES={p:-100,n:-320,b:-330,r:-500,q:-900,k:0,P:100,N:320,B:330,R:500,Q:900,K:0},KING_PST_MIDDLE=[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]],KING_PST_END=[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]],filesStr="abcdefgh",ranksStr="87654321";function oppositeColor(e){return"w"===e?"b":"w"}function pieceColor(e){return e?e===e.toUpperCase()?"w":"b":null}function onBoard(e,t){return e>=0&&e<8&&t>=0&&t<8}function deepClone(e){return"function"==typeof structuredClone?structuredClone(e):JSON.parse(JSON.stringify(e))}class ChessEngine{constructor(e=START_FEN,t=null){this.state=this.parseFEN(e),this.moveHistory=[],this.positionHistory=[this.positionKey(this.state)],this.selected=null,this.legalTargets=[],this.searchPositions=0,this.searchDepth=0,this.searchStartTime=0,this.pruned=0,this.genome=t||this.getDefaultGenome(),this.isPlayerTurn=!0,this.flipBoard=!1}getDefaultGenome(){return{materialWeight:1,positionalWeight:.5}}cloneState(e=this.state){return deepClone(e)}parseFEN(e){const t=(e||"").trim().split(/\s+/);if(6!==t.length)throw new Error("Invalid FEN: must have 6 fields.");const[n,o,a,i,s,r]=t,l=n.split("/");if(8!==l.length)throw new Error("Invalid FEN: must have 8 ranks.");const c=Array.from({length:8},(()=>Array(8).fill("")));for(let e=0;e<8;e++){let t=0;const n=l[e];for(let o=0;o<n.length;o++){const a=n[o];if(/[1-8]/.test(a))t+=Number(a);else{if(!/[prnbqkPRNBQK]/.test(a))throw new Error(`Invalid FEN: unexpected character "${a}".`);if(t>=8)throw new Error(`Invalid FEN: too many squares on rank ${8-e}.`);c[e][t++]=a}}if(8!==t)throw new Error(`Invalid FEN: rank ${8-e} does not fill 8 files.`)}if("w"!==o&&"b"!==o)throw new Error("Invalid FEN: active color must be 'w' or 'b'.");const m="-"===a?"-":a,u={wK:m.includes("K"),wQ:m.includes("Q"),bK:m.includes("k"),bQ:m.includes("q")};let d=null;if("-"!==i){if(!/^[a-h][36]$/.test(i))throw new Error("Invalid FEN: bad en-passant square.");const e=filesStr.indexOf(i[0]);d=[8-Number(i[1]),e]}return{board:c,activeColor:o,castling:u,enPassant:d,halfmove:Number.isNaN(Number(s))?0:parseInt(s,10),fullmove:Number.isNaN(Number(r))?1:parseInt(r,10)}}positionKey(e){return`${e.board.map((e=>{let t="",n=0;for(const o of e)o?(n>0&&(t+=n,n=0),t+=o):n++;return n>0&&(t+=n),t})).join("/")} ${e.activeColor} ${(e.castling.wK?"K":"")+(e.castling.wQ?"Q":"")+(e.castling.bK?"k":"")+(e.castling.bQ?"q":"")||"-"} ${e.enPassant?filesStr[e.enPassant[1]]+(8-e.enPassant[0]):"-"}`}generateLegalMoves(e){const t=this.generatePseudoLegalMoves(e),n=[];for(const o of t){const t=this.cloneState(e);this.doMove(t,o);const a=oppositeColor(t.activeColor),i=this.findKing(t,a);i&&(this.isSquareAttacked(t,i[0],i[1],t.activeColor)||n.push(o))}return n}generatePseudoLegalMoves(e){const t=[],n=e.activeColor;for(let o=0;o<8;o++)for(let a=0;a<8;a++){const i=e.board[o][a];if(!i)continue;if(pieceColor(i)!==n)continue;const s=i.toLowerCase();"p"===s?t.push(...this.pawnMoves(e,o,a)):"n"===s?t.push(...this.knightMoves(e,o,a)):"b"===s?t.push(...this.slidingMoves(e,o,a,[[1,1],[1,-1],[-1,1],[-1,-1]])):"r"===s?t.push(...this.slidingMoves(e,o,a,[[1,0],[-1,0],[0,1],[0,-1]])):"q"===s?t.push(...this.slidingMoves(e,o,a,[[1,1],[1,-1],[-1,1],[-1,-1],[1,0],[-1,0],[0,1],[0,-1]])):"k"===s&&t.push(...this.kingMoves(e,o,a))}return t}pawnMoves(e,t,n){const o=[],a=e.board[t][n],i=pieceColor(a),s="w"===i?-1:1,r="w"===i?6:1,l=oppositeColor(i),c=t+s;if(onBoard(c,n)&&!e.board[c][n]){if(0===c||7===c)for(const e of["q","r","b","n"])o.push({from:[t,n],to:[c,n],piece:a,capture:null,promotion:e,flags:{}});else o.push({from:[t,n],to:[c,n],piece:a,capture:null,promotion:null,flags:{}});if(t===r){const i=t+2*s;e.board[i][n]||o.push({from:[t,n],to:[i,n],piece:a,capture:null,promotion:null,flags:{double:!0}})}}for(const r of[-1,1]){const c=n+r,m=t+s;if(onBoard(m,c)){const s=e.board[m][c];if(s&&pieceColor(s)===l)if(0===m||7===m)for(const e of["q","r","b","n"])o.push({from:[t,n],to:[m,c],piece:a,capture:s,promotion:e,flags:{}});else o.push({from:[t,n],to:[m,c],piece:a,capture:s,promotion:null,flags:{}});e.enPassant&&e.enPassant[0]===m&&e.enPassant[1]===c&&o.push({from:[t,n],to:[m,c],piece:a,capture:"w"===i?"p":"P",promotion:null,flags:{enpassant:!0}})}}return o}knightMoves(e,t,n){const o=[],a=e.board[t][n],i=oppositeColor(pieceColor(a)),s=[[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]];for(const[r,l]of s){const s=t+r,c=n+l;if(!onBoard(s,c))continue;const m=e.board[s][c];m?pieceColor(m)===i&&o.push({from:[t,n],to:[s,c],piece:a,capture:m,promotion:null,flags:{}}):o.push({from:[t,n],to:[s,c],piece:a,capture:null,promotion:null,flags:{}})}return o}slidingMoves(e,t,n,o){const a=[],i=e.board[t][n],s=oppositeColor(pieceColor(i));for(const[r,l]of o){let o=t+r,c=n+l;for(;onBoard(o,c);){const m=e.board[o][c];if(m){pieceColor(m)===s&&a.push({from:[t,n],to:[o,c],piece:i,capture:m,promotion:null,flags:{}});break}a.push({from:[t,n],to:[o,c],piece:i,capture:null,promotion:null,flags:{}}),o+=r,c+=l}}return a}kingMoves(e,t,n){const o=[],a=e.board[t][n],i=pieceColor(a),s=oppositeColor(i);for(let i=-1;i<=1;i++)for(let r=-1;r<=1;r++){if(0===i&&0===r)continue;const l=t+i,c=n+r;if(!onBoard(l,c))continue;const m=e.board[l][c];m?pieceColor(m)===s&&o.push({from:[t,n],to:[l,c],piece:a,capture:m,promotion:null,flags:{}}):o.push({from:[t,n],to:[l,c],piece:a,capture:null,promotion:null,flags:{}})}return"w"===i&&7===t&&4===n&&(e.castling.wK&&(e.board[7][5]||e.board[7][6]||this.isSquareAttacked(e,7,4,s)||this.isSquareAttacked(e,7,5,s)||this.isSquareAttacked(e,7,6,s)||o.push({from:[7,4],to:[7,6],piece:a,capture:null,promotion:null,flags:{castle:"K"}})),e.castling.wQ&&(e.board[7][3]||e.board[7][2]||e.board[7][1]||this.isSquareAttacked(e,7,4,s)||this.isSquareAttacked(e,7,3,s)||this.isSquareAttacked(e,7,2,s)||o.push({from:[7,4],to:[7,2],piece:a,capture:null,promotion:null,flags:{castle:"Q"}}))),"b"===i&&0===t&&4===n&&(e.castling.bK&&(e.board[0][5]||e.board[0][6]||this.isSquareAttacked(e,0,4,s)||this.isSquareAttacked(e,0,5,s)||this.isSquareAttacked(e,0,6,s)||o.push({from:[0,4],to:[0,6],piece:a,capture:null,promotion:null,flags:{castle:"K"}})),e.castling.bQ&&(e.board[0][3]||e.board[0][2]||e.board[0][1]||this.isSquareAttacked(e,0,4,s)||this.isSquareAttacked(e,0,3,s)||this.isSquareAttacked(e,0,2,s)||o.push({from:[0,4],to:[0,2],piece:a,capture:null,promotion:null,flags:{castle:"Q"}}))),o}findKing(e,t){const n="w"===t?"K":"k";for(let t=0;t<8;t++)for(let o=0;o<8;o++)if(e.board[t][o]===n)return[t,o];return null}isSquareAttacked(e,t,n,o){const a=t-("w"===o?-1:1);for(const t of[n-1,n+1])if(onBoard(a,t)&&e.board[a][t]&&"p"===e.board[a][t].toLowerCase()&&pieceColor(e.board[a][t])===o)return!0;const i=[[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]];for(const[a,s]of i){const i=t+a,r=n+s;if(onBoard(i,r)&&e.board[i][r]&&"n"===e.board[i][r].toLowerCase()&&pieceColor(e.board[i][r])===o)return!0}const s=[[1,1],[1,-1],[-1,1],[-1,-1]];for(const[a,i]of s){let s=t+a,r=n+i;for(;onBoard(s,r);){const t=e.board[s][r];if(t){if(pieceColor(t)===o&&("b"===t.toLowerCase()||"q"===t.toLowerCase()))return!0;break}s+=a,r+=i}}const r=[[1,0],[-1,0],[0,1],[0,-1]];for(const[a,i]of r){let s=t+a,r=n+i;for(;onBoard(s,r);){const t=e.board[s][r];if(t){if(pieceColor(t)===o&&("r"===t.toLowerCase()||"q"===t.toLowerCase()))return!0;break}s+=a,r+=i}}for(let a=-1;a<=1;a++)for(let i=-1;i<=1;i++){if(0===a&&0===i)continue;const s=t+a,r=n+i;if(onBoard(s,r)&&e.board[s][r]&&"k"===e.board[s][r].toLowerCase()&&pieceColor(e.board[s][r])===o)return!0}return!1}doMove(e,t){const[n,o]=t.from,[a,i]=t.to,s=e.board[n][o];if(e.board[n][o]="",t.flags&&t.flags.enpassant){const t=n,o=i;e.board[t][o]=""}if(t.flags&&t.flags.castle)"K"===t.flags.castle?(e.board[a][i]=s,e.board[a][5]=e.board[a][7],e.board[a][7]=""):"Q"===t.flags.castle&&(e.board[a][i]=s,e.board[a][3]=e.board[a][0],e.board[a][0]="");else if(t.promotion){const n=s===s.toUpperCase()?t.promotion.toUpperCase():t.promotion.toLowerCase();e.board[a][i]=n}else e.board[a][i]=s;"k"===s.toLowerCase()&&(s===s.toUpperCase()?(e.castling.wK=!1,e.castling.wQ=!1):(e.castling.bK=!1,e.castling.bQ=!1)),"r"===s.toLowerCase()&&(7===n&&0===o&&(e.castling.wQ=!1),7===n&&7===o&&(e.castling.wK=!1),0===n&&0===o&&(e.castling.bQ=!1),0===n&&7===o&&(e.castling.bK=!1));const r=t.capture;r&&"r"===r.toLowerCase()&&(7===a&&0===i&&(e.castling.wQ=!1),7===a&&7===i&&(e.castling.wK=!1),0===a&&0===i&&(e.castling.bQ=!1),0===a&&7===i&&(e.castling.bK=!1)),e.enPassant=null,"p"===s.toLowerCase()&&2===Math.abs(a-n)&&(e.enPassant=[(n+a)/2,o]),"p"===s.toLowerCase()||t.capture?e.halfmove=0:e.halfmove++,"b"===e.activeColor&&e.fullmove++,e.activeColor=oppositeColor(e.activeColor)}minimax(e,t,n,o,a,i,s=[]){if(this.searchPositions++,0===t)return{score:this.evaluate(e),sequence:s};const r=this.generateLegalMoves(e),l=this.findKing(e,e.activeColor);if(0===r.length){if(!l)return{score:i?-1/0:1/0,sequence:s};return this.isSquareAttacked(e,l[0],l[1],oppositeColor(e.activeColor))?{score:"w"===e.activeColor?-1e5:1e5,sequence:s}:{score:0,sequence:s}}if(a){let a=-1/0,l=[];for(const c of r){const r=this.cloneState(e);this.doMove(r,c);const m=this.minimax(r,t-1,n,o,!1,i,[...s,c]);if(m.score>a&&(a=m.score,l=m.sequence),(n=Math.max(n,m.score))>=o){this.pruned++;break}}return{score:a,sequence:l}}{let a=1/0,l=[];for(const c of r){const r=this.cloneState(e);this.doMove(r,c);const m=this.minimax(r,t-1,n,o,!0,i,[...s,c]);if(m.score<a&&(a=m.score,l=m.sequence),n>=(o=Math.min(o,m.score))){this.pruned++;break}}return{score:a,sequence:l}}}findBestMove(e){debugLog("=== ENGINE THINKING ===\n",!0),this.searchPositions=0,this.searchDepth=e,this.searchStartTime=performance.now(),this.pruned=0;const t=this.state,n=this.generateLegalMoves(t);let o=null,a="w"===t.activeColor?-1/0:1/0,i=[];debugLog(`Evaluating ${n.length} legal moves at depth ${e}\n`);for(const e of n){const n=this.cloneState(t);this.doMove(n,e);const o=this.generateLegalMoves(n),a=this.findKing(n,n.activeColor);if(0===o.length&&a&&this.isSquareAttacked(n,a[0],a[1],t.activeColor))return debugLog(`FOUND CHECKMATE: ${moveToAlgebraic(e)}\n`),e}for(const s of n){const n=this.cloneState(t);this.doMove(n,s);const r=this.minimax(n,e-1,-1/0,1/0,"w"===n.activeColor,!0,[s]),l=r.score,c=r.sequence,m=moveToAlgebraic(s);debugLog(`${m}: ${l}\n${this.evalDetails.breakdown}\nPrincipal variation:\n${c.map(((e,t)=>`${t%2==0?"White":"Black"}: ${moveToAlgebraic(e)}`)).join("\n")}\n---\n`),"w"===t.activeColor?l>a&&(a=l,o=s,i=c,debugLog(`↑ NEW BEST MOVE ↑\nNEW BEST: ${m} = ${l}\n---\n`)):l<a&&(a=l,o=s,i=c,debugLog(`↑ NEW BEST MOVE ↑\nNEW BEST: ${m} = ${l}\n---\n`))}const s=(performance.now()-this.searchStartTime).toFixed(2),r=i.map(((e,t)=>`${t%2==0?"White":"Black"}: ${moveToAlgebraic(e)}`)).join("\n");return o?debugLog(`\n=== FINAL SELECTION ===\nMove: ${moveToAlgebraic(o)}\nEvaluation: ${a}\nPositions evaluated: ${this.searchPositions}\nBranches pruned: ${this.pruned}\nTime taken: ${s}ms\n\nPrincipal variation:\n${r}\n\n`,!0):(o=n[Math.floor(Math.random()*n.length)],debugLog(`\nNo best move found, selecting random: ${moveToAlgebraic(o)}\nBranches pruned: ${this.pruned}\n`)),o}evaluate(e){this.evalDetails={material:0,positional:0,total:0,breakdown:""};const t=this.generateLegalMoves(e),n=this.findKing(e,e.activeColor);if(!n)return this.evalDetails.total="w"===e.activeColor?-1/0:1/0,this.evalDetails.breakdown="King missing",this.evalDetails.total;const o=this.isSquareAttacked(e,n[0],n[1],oppositeColor(e.activeColor));if(0===t.length&&o)return this.evalDetails.total="w"===e.activeColor?-1e5:1e5,this.evalDetails.breakdown="Checkmate",this.evalDetails.total;if(0===t.length&&!o)return this.evalDetails.total=0,this.evalDetails.breakdown="Stalemate",this.evalDetails.total;let a=0;for(let t=0;t<8;t++)for(let n=0;n<8;n++){const o=e.board[t][n];o&&(a+=PIECE_VALUES[o])}let i=0;for(let t=0;t<8;t++)for(let n=0;n<8;n++){const o=e.board[t][n];if(o&&"p"===o.toLowerCase()){const e="P"===o?6:1,n=Math.abs(t-e);i+=5*("P"===o?n:-n)}}let s=0;return s+=a*this.genome.materialWeight,s+=i*this.genome.positionalWeight,this.evalDetails.material=a,this.evalDetails.positional=i,this.evalDetails.total=s,this.evalDetails.breakdown=`Material: ${a} × ${this.genome.materialWeight} = ${a*this.genome.materialWeight}\nPositional: ${i} × ${this.genome.positionalWeight} = ${i*this.genome.positionalWeight}\nTotal: ${s}`,s}makeMove(e){const t=deepClone(e);return this.doMove(this.state,t),this.moveHistory.push(t),this.positionHistory.push(this.positionKey(this.state)),t}isFiftyMoveDraw(e=this.state){return e.halfmove>=100}isThreefoldRepetition(){const e=this.positionKey(this.state);let t=0;for(const n of this.positionHistory)n===e&&t++;return t>=3}isInsufficientMaterial(e=this.state){let t=0,n=0,o=0,a=0,i=0;const s=[];for(let r=0;r<8;r++)for(let l=0;l<8;l++){const c=e.board[r][l];if(!c)continue;const m=c.toLowerCase();"p"===m?t++:"r"===m?n++:"q"===m?o++:"b"===m?(a++,s.push(r+l&1)):"n"===m&&i++}if(t>0||n>0||o>0)return!1;const r=a+i;if(0===r)return!0;if(1===r)return!0;if(2===r){if(2===i)return!0;if(2===a){if(s.every((e=>e===s[0])))return!0}}return!1}}const canvas=document.getElementById("boardCanvas"),ctx=canvas.getContext("2d"),size=canvas.width,sq=size/8,whitePlayerSelect=document.getElementById("whitePlayer"),blackPlayerSelect=document.getElementById("blackPlayer"),startButton=document.getElementById("btnStart");let gameStarted=!1,whitePlayerType="human",blackPlayerType="bot";const pieceImages={};let imagesLoaded=0;const piecesList=["wK","wQ","wR","wB","wN","wP","bK","bQ","bR","bB","bN","bP"],totalImages=piecesList.length,imageSize=64;function loadPieceImages(){piecesList.forEach((e=>{const t=new Image;t.onload=()=>{imagesLoaded++,imagesLoaded===totalImages&&(document.getElementById("loading").style.display="none",document.getElementById("game").style.display="flex",render())},t.onerror=()=>{console.error(`Failed to load images/${e}.png`),imagesLoaded++,imagesLoaded===totalImages&&(document.getElementById("loading").style.display="none",document.getElementById("game").style.display="flex",render())},t.src=`images/${e}.png`,pieceImages[e]=t}))}const mainEngine=new ChessEngine(START_FEN);function render(){const e=mainEngine.state,t=mainEngine.flipBoard;ctx.clearRect(0,0,size,size);for(let e=0;e<8;e++)for(let n=0;n<8;n++){const o=(t?7-n:n)*sq,a=(t?7-e:e)*sq,i=(e+n)%2==0;if(ctx.fillStyle=i?getComputedStyle(document.documentElement).getPropertyValue("--light"):getComputedStyle(document.documentElement).getPropertyValue("--dark"),ctx.fillRect(o,a,sq,sq),7===e){ctx.fillStyle=i?"#000":"#fff",ctx.font="12px Arial",ctx.textAlign="right",ctx.textBaseline="bottom";const e=filesStr[t?7-n:n];ctx.fillText(e,o+sq-6,a+sq-6)}if(0===n){ctx.fillStyle=i?"#000":"#fff",ctx.font="12px Arial",ctx.textAlign="left",ctx.textBaseline="top";const n=ranksStr[t?e:7-e];ctx.fillText(n,o+6,a+6)}}if(mainEngine.selected){const[e,t]=mainEngine.selected;ctx.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--highlight"),drawRect(e,t);for(const e of mainEngine.legalTargets)ctx.fillStyle=e.capture?getComputedStyle(document.documentElement).getPropertyValue("--capture"):getComputedStyle(document.documentElement).getPropertyValue("--highlight"),drawRect(e.to[0],e.to[1])}for(let n=0;n<8;n++)for(let o=0;o<8;o++){const a=e.board[n][o];if(!a)continue;const i=(t?7-o:o)*sq,s=(t?7-n:n)*sq,r=a===a.toUpperCase()?"w":"b",l=r+a.toUpperCase();if(pieceImages[l]&&pieceImages[l].width>0){const e=(sq-imageSize)/2;ctx.drawImage(pieceImages[l],i+e,s+e,imageSize,imageSize)}else ctx.textAlign="center",ctx.textBaseline="middle",ctx.font=.75*sq+"px serif",ctx.fillStyle="w"===r?"#fff":"#000",ctx.fillText(glyphs[a]||a,i+sq/2,s+sq/2)}}function drawRect(e,t){const n=mainEngine.flipBoard?7-e:e,o=mainEngine.flipBoard?7-t:t;ctx.fillRect(o*sq,n*sq,sq,sq)}function evaluatePosition(e){return mainEngine.evaluate(e||mainEngine.state)}function updateEvalBar(){const e=document.getElementById("evalBarContainer"),t=document.getElementById("evalBar"),n=document.getElementById("evalScore");e.style.display="block";const o=evaluatePosition(mainEngine.state),a=(o>0?"+":"")+(o/100).toFixed(2);n.textContent=a;let i=50+Math.max(Math.min(o,500),-500)/500*50;o<0&&(i=100-i),t.style.height=i+"%"}function showPromotionOverlay(e){const t=document.getElementById("promotionOverlay");t.innerHTML="",t.style.display="flex";const n=document.createElement("div");n.className="promoBox";const o=mainEngine.state.board[e.from[0]][e.from[1]]===mainEngine.state.board[e.from[0]][e.from[1]].toUpperCase(),a=o?["Q","R","B","N"]:["q","r","b","n"];for(let i=0;i<4;i++){const s=(o?"w":"b")+a[i].toUpperCase(),r=document.createElement("div");r.className="promoBtn",pieceImages[s]&&pieceImages[s].width>0?(r.style.backgroundImage=`url('images/${s}.png')`,r.style.backgroundSize="contain",r.style.backgroundRepeat="no-repeat",r.style.backgroundPosition="center"):(r.textContent=glyphs[a[i]]||a[i],r.style.display="flex",r.style.alignItems="center",r.style.justifyContent="center",r.style.fontSize="30px"),r.onclick=()=>{e.promotion=a[i].toLowerCase(),t.style.display="none",mainEngine.makeMove(e),mainEngine.selected=null,mainEngine.legalTargets=[],render(),refreshPanels(),checkAndMakeBotMove(),checkEnd()},n.appendChild(r)}t.appendChild(n)}function onSquareClick(e,t){if("human"!==("w"===mainEngine.state.activeColor?whitePlayerType:blackPlayerType))return;const n=mainEngine.state.board[e][t];if(mainEngine.selected){const o=mainEngine.legalTargets.find((n=>n.to[0]===e&&n.to[1]===t));if(o)return o.promotion?void showPromotionOverlay(o):(mainEngine.makeMove(o),mainEngine.selected=null,mainEngine.legalTargets=[],render(),updateEvalBar(),refreshPanels(),void checkAndMakeBotMove());n&&pieceColor(n)===mainEngine.state.activeColor?(mainEngine.selected=[e,t],mainEngine.legalTargets=mainEngine.generateLegalMoves(mainEngine.state).filter((n=>n.from[0]===e&&n.from[1]===t)),render()):(mainEngine.selected=null,mainEngine.legalTargets=[],render())}else n&&pieceColor(n)===mainEngine.state.activeColor&&(mainEngine.selected=[e,t],mainEngine.legalTargets=mainEngine.generateLegalMoves(mainEngine.state).filter((n=>n.from[0]===e&&n.from[1]===t)),render())}function checkAndMakeBotMove(){"bot"===("w"===mainEngine.state.activeColor?whitePlayerType:blackPlayerType)&&setTimeout(makeAIMove,50)}function debugLog(e,t=!1){const n=document.getElementById("debugOutput");t?n.textContent=e:n.textContent+=e,n.scrollTop=n.scrollHeight}function refreshPanels(){document.getElementById("movelist").textContent=mainEngine.moveHistory.map(((e,t)=>`${t+1}. ${moveToAlgebraic(e)}`)).join("\n"),document.getElementById("gamestate").textContent=JSON.stringify({activeColor:mainEngine.state.activeColor,castling:mainEngine.state.castling,enPassant:mainEngine.state.enPassant,halfmove:mainEngine.state.halfmove,fullmove:mainEngine.state.fullmove},null,2)}function moveToAlgebraic(e){const t=filesStr[e.from[1]]+ranksStr[e.from[0]],n=filesStr[e.to[1]]+ranksStr[e.to[0]];let o=t+n;return e.promotion&&(o+="="+e.promotion.toUpperCase()),e.flags&&e.flags.castle&&(o="K"===e.flags.castle?"O-O":"O-O-O"),e.flags&&e.flags.enpassant&&(o+="e.p."),e.capture&&(o=t[0]+"x"+n),o}function makeAIMove(){"bot"===("w"===mainEngine.state.activeColor?whitePlayerType:blackPlayerType)&&(debugLog("AI is thinking..."),setTimeout((()=>{if(0===mainEngine.generateLegalMoves(mainEngine.state).length)return void checkEnd();const e=mainEngine.findBestMove(2);e.promotion&&(e.promotion="q"),mainEngine.makeMove(e),render(),updateEvalBar(),refreshPanels(),checkAndMakeBotMove(),checkEnd()}),100))}function checkEnd(){if(0===mainEngine.generateLegalMoves(mainEngine.state).length){const e=mainEngine.findKing(mainEngine.state,mainEngine.state.activeColor);if(!e)return alert("Game over (king missing)"),void(gameStarted=!1);return mainEngine.isSquareAttacked(mainEngine.state,e[0],e[1],oppositeColor(mainEngine.state.activeColor))?(alert("Checkmate! "+("w"===mainEngine.state.activeColor?"Black":"White")+" wins."),void(gameStarted=!1)):(alert("Stalemate."),void(gameStarted=!1))}return mainEngine.isThreefoldRepetition()?(alert("Draw by threefold repetition."),void(gameStarted=!1)):mainEngine.isFiftyMoveDraw()?(alert("Draw by fifty-move rule."),void(gameStarted=!1)):mainEngine.isInsufficientMaterial()?(alert("Draw by insufficient material."),void(gameStarted=!1)):void 0}function startGame(){whitePlayerType=whitePlayerSelect.value,blackPlayerType=blackPlayerSelect.value,mainEngine.state=mainEngine.parseFEN(START_FEN),mainEngine.moveHistory=[],mainEngine.positionHistory=[mainEngine.positionKey(mainEngine.state)],mainEngine.selected=null,mainEngine.legalTargets=[],gameStarted=!0,render(),updateEvalBar(),refreshPanels(),"bot"===whitePlayerType&&checkAndMakeBotMove()}function loadFEN(){const e=document.getElementById("fenInput").value,t=document.getElementById("fenError");if(!e)return t.textContent="Please enter a FEN string.",void(t.style.display="block");try{mainEngine.state=mainEngine.parseFEN(e),mainEngine.moveHistory=[],mainEngine.positionHistory=[mainEngine.positionKey(mainEngine.state)],mainEngine.selected=null,mainEngine.legalTargets=[],document.getElementById("movelist").textContent="",document.getElementById("gamestate").textContent=JSON.stringify({activeColor:mainEngine.state.activeColor,castling:mainEngine.state.castling,enPassant:mainEngine.state.enPassant,halfmove:mainEngine.state.halfmove,fullmove:mainEngine.state.fullmove},null,2),t.style.display="none",render(),updateEvalBar()}catch(e){t.textContent=e.message,t.style.display="block"}}canvas.addEventListener("click",(e=>{if(!gameStarted)return;const t=canvas.getBoundingClientRect(),n=e.clientX-t.left,o=e.clientY-t.top,a=Math.floor(n/sq),i=Math.floor(o/sq),s=mainEngine.flipBoard?7-a:a;onSquareClick(mainEngine.flipBoard?7-i:i,s)})),document.getElementById("btnLoadFEN").addEventListener("click",loadFEN),document.getElementById("fenInput").addEventListener("keypress",(function(e){"Enter"===e.key&&loadFEN()})),document.getElementById("btnReset").addEventListener("click",(()=>{mainEngine.state=mainEngine.parseFEN(START_FEN),mainEngine.moveHistory=[],mainEngine.positionHistory=[mainEngine.positionKey(mainEngine.state)],mainEngine.selected=null,mainEngine.legalTargets=[],render(),updateEvalBar(),refreshPanels()})),document.getElementById("btnFlip").addEventListener("click",(()=>{mainEngine.flipBoard=!mainEngine.flipBoard,render(),updateEvalBar()})),startButton.addEventListener("click",startGame);let tournamentMode=!1,tournamentGames=[],tournamentWorkers=[];const TOURNAMENT_GAME_COUNT=4;"undefined"!=typeof window&&function(){if(loadPieceImages(),!tournamentMode){render(),updateEvalBar();const e=document.getElementById("fenInput");e&&(e.value=START_FEN)}}(),"undefined"!=typeof self&&(self.ChessEngine=ChessEngine);let currentGenome=null;function createGenomeInputs(e){const t=document.getElementById("genomeInputs");t.innerHTML="";for(const[n,o]of Object.entries(e)){const e=document.createElement("div");e.className="genome-input-group";const a=document.createElement("label");a.textContent=n+":";const i=document.createElement("input");i.type="number",i.step="0.1",i.value=o,i.id=`genome-${n}`,e.appendChild(a),e.appendChild(i),t.appendChild(e)}}function getGenomeFromInputs(){const e={};return document.querySelectorAll("#genomeInputs input").forEach((t=>{const n=t.id.replace("genome-","");e[n]=parseFloat(t.value)||0})),e}function updateGenomeStatus(e,t=!1){const n=document.getElementById("genomeStatus");n.textContent=e,n.className="genome-status "+(t?"error":"success"),setTimeout((()=>{n.textContent="",n.className="genome-status"}),3e3)}function generateRandomGenome(){const e=(new ChessEngine).getDefaultGenome(),t={};for(const[n,o]of Object.entries(e))t[n]=(1.9*Math.random()+.1).toFixed(2);return t}function startTournamentMode(e=null){tournamentMode=!0,document.getElementById("debugPanel").classList.add("hidden"),document.getElementById("controls").classList.add("hidden"),document.getElementById("game").classList.remove("hidden"),document.getElementById("game").classList.add("tournament-mode");document.getElementById("game").innerHTML='\n    <div class="tournament-header">AI Tournament</div>\n    \n    <div class="tournament-genome-controls">\n      <h3>AI Genome Configuration</h3>\n      <div id="genomeInputs"></div>\n      <div class="genome-buttons">\n        <button id="btnDefaultGenome">Default Genome</button>\n        <button id="btnRandomGenome">Random Genome</button>\n        <button id="btnStartTournament">Start Tournament</button>\n      </div>\n      <div id="genomeStatus" class="genome-status"></div>\n    </div>\n    \n    <div class="tournament-boards" id="tournamentBoards"></div>\n    <div class="tournament-controls">\n      <button id="btnStopTournament">Stop Tournament</button>\n      <button id="btnPauseTournament">Pause/Resume</button>\n    </div>\n  ',currentGenome=e||(new ChessEngine).getDefaultGenome(),createGenomeInputs(currentGenome),document.getElementById("btnDefaultGenome").addEventListener("click",(()=>{const e=(new ChessEngine).getDefaultGenome();currentGenome=e,createGenomeInputs(e),updateGenomeStatus("Default genome loaded")})),document.getElementById("btnRandomGenome").addEventListener("click",(()=>{const e=generateRandomGenome();currentGenome=e,createGenomeInputs(e),updateGenomeStatus("Random genome generated")})),document.getElementById("btnStartTournament").addEventListener("click",(()=>{currentGenome=getGenomeFromInputs(),initializeTournamentGames(currentGenome)})),document.getElementById("btnStopTournament").addEventListener("click",stopTournament),document.getElementById("btnPauseTournament").addEventListener("click",togglePauseTournament)}function initializeTournamentGames(e=null){tournamentGames=[],tournamentWorkers=[];const t=e||currentGenome||(new ChessEngine).getDefaultGenome(),n=document.getElementById("tournamentBoards");n.innerHTML="";for(let e=0;e<TOURNAMENT_GAME_COUNT;e++){const o=document.createElement("div");o.className="tournament-board-container";const a=Object.entries(t).map((([e,t])=>`${getGenomeAbbreviation(e)}:${t.toFixed(1)}`)).join(" "),i=Object.entries(t).map((([e,t])=>`${getGenomeAbbreviation(e)}:${t.toFixed(1)}`)).join(" ");o.innerHTML=`\n      <div class="tournament-info" id="tournamentInfo${e}">\n        <div>White: ${a}</div>\n        <div>Black: ${i}</div>\n      </div>\n      <canvas class="tournament-canvas" id="tournamentCanvas${e}" width="320" height="320"></canvas>\n      <div class="tournament-info" id="tournamentEval${e}">Evaluation: 0.00</div>\n    `,n.appendChild(o);const s=document.getElementById(`tournamentCanvas${e}`),r={canvas:s,ctx:s.getContext("2d"),info:document.getElementById(`tournamentInfo${e}`),eval:document.getElementById(`tournamentEval${e}`),paused:!1,gameOver:!1,ready:!1,engine:null,genome:{...t},genomeStringWhite:a,genomeStringBlack:i};tournamentGames.push(r);const l=`\n      ${ChessEngine.toString()}\n\n      const filesStr = "abcdefgh";\n      const ranksStr = "87654321";\n      const PIECE_VALUES = { p:-100,n:-320,b:-330,r:-500,q:-900,k:0,P:100,N:320,B:330,R:500,Q:900,K:0 };\n      function oppositeColor(c){ return c==='w'?'b':'w'; }\n      function pieceColor(p){ if(!p) return null; return p===p.toUpperCase()?'w':'b'; }\n      function onBoard(r,c){ return r>=0&&r<8&&c>=0&&c<8; }\n      function deepClone(o){ return typeof structuredClone==='function'?structuredClone(o):JSON.parse(JSON.stringify(o)); }\n      function moveToAlgebraic(m){\n        const from = filesStr[m.from[1]]+ranksStr[m.from[0]];\n        const to = filesStr[m.to[1]]+ranksStr[m.to[0]];\n        let s = from+to;\n        if(m.promotion) s+='='+m.promotion.toUpperCase();\n        if(m.flags && m.flags.castle) s = m.flags.castle==='K'?'O-O':'O-O-O';\n        if(m.flags && m.flags.enpassant) s+='e.p.';\n        if(m.capture) s = from[0]+'x'+to;\n        return s;\n      }\n      function debugLog(...args){}\n      function isGameOver(engine) {\n        const legal = engine.generateLegalMoves(engine.state);\n        return legal.length === 0 || engine.isThreefoldRepetition() || engine.isFiftyMoveDraw() || engine.isInsufficientMaterial();\n      }\n      function getGameResult(engine) {\n        const legal = engine.generateLegalMoves(engine.state);\n        if (legal.length > 0) {\n          if(engine.isThreefoldRepetition()) return "Draw by repetition";\n          if(engine.isFiftyMoveDraw()) return "Draw by 50-move rule";\n          if(engine.isInsufficientMaterial()) return "Draw by insufficient material";\n          return "Game in progress";\n        }\n        const kingPos = engine.findKing(engine.state, engine.state.activeColor);\n        if(!kingPos) return "Invalid position";\n        const inCheck = engine.isSquareAttacked(engine.state, kingPos[0], kingPos[1], oppositeColor(engine.state.activeColor));\n        return inCheck ? \`Checkmate - \${engine.state.activeColor==='w'?'Black':'White'} wins\` : "Stalemate";\n      }\n\n      self.addEventListener('message', e=>{\n        const { type, data } = e.data;\n\n        if(type==='init') {\n          self.engine = new ChessEngine(data.fen, data.genome || null);\n          self.postMessage({ type:'ready' });\n        }\n\n        if(type==='getMove' && self.engine) {\n          if(isGameOver(self.engine)) {\n            self.postMessage({ type:'move', data:{ move:null, evaluation:self.engine.evaluate(self.engine.state), gameOver:true, result:getGameResult(self.engine) } });\n          } else {\n            const move = self.engine.findBestMove(data.depth);\n            self.engine.makeMove(move);\n            self.postMessage({ type:'move', data:{ move, evaluation:self.engine.evaluate(self.engine.state) } });\n          }\n        }\n\n        if(type==='makeMove' && self.engine) {\n          self.engine.makeMove(data.move);\n          self.postMessage({ type:'moveApplied' });\n        }\n      });\n    `,c=new Blob([l],{type:"application/javascript"}),m=new Worker(URL.createObjectURL(c));m.onmessage=t=>{const{type:n,data:o}=t.data;"ready"===n?(tournamentGames[e].ready=!0,console.log(`Worker ${e} ready`),makeAIMoveInTournament(e)):handleWorkerMessage(e,t.data)},tournamentWorkers.push(m),m.postMessage({type:"init",data:{fen:START_FEN,genome:{...t}}})}updateGenomeStatus("Tournament started with custom genome!")}function getGenomeAbbreviation(e){return{materialWeight:"M",positionalWeight:"P",kingSafetyWeight:"K",tempoBonus:"T",mobilityWeight:"Mb",pawnStructureWeight:"Ps",centerControlWeight:"Cc"}[e]||e.substring(0,2)}function handleWorkerMessage(e,t){const n=tournamentGames[e];if("move"===t.type){if(t.data.gameOver)return n.info.innerHTML=`\n          <div>${n.genomeStringWhite}</div>\n          <div>${n.genomeStringBlack}</div>\n          <div>${t.data.result}</div>\n        `,void(n.gameOver=!0);n.state&&n.state.board||(n.state={board:fenToBoard(START_FEN)}),n.state.board=applyMoveToBoard(n.state.board,t.data.move),n.lastMove=t.data.move,renderTournamentBoard(e),n.eval.textContent=`Evaluation: ${(t.data.evaluation/100).toFixed(2)}`,n.paused||setTimeout((()=>makeAIMoveInTournament(e)),100)}}function fenToBoard(e){const t=[],n=e.split(" ")[0].split("/");for(let e=0;e<8;e++){const o=[];for(let t of n[e])if(/[1-8]/.test(t))for(let e=0;e<parseInt(t);e++)o.push(null);else o.push(t);t.push(o)}return t}function applyMoveToBoard(e,t){const[n,o]=t.from,[a,i]=t.to,s=e[n][o];if(e[a][i]=e[n][o],e[n][o]=null,t.promotion){const n=s===s.toUpperCase();e[a][i]=n?t.promotion.toUpperCase():t.promotion.toLowerCase()}return e}function renderTournamentBoard(e){const t=tournamentGames[e],n=t.state;if(!n||!n.board)return;const o=t.canvas,a=t.ctx,i=o.width/8;a.clearRect(0,0,o.width,o.height);for(let e=0;e<8;e++)for(let t=0;t<8;t++)a.fillStyle=(e+t)%2==0?"#f0d9b5":"#b58863",a.fillRect(t*i,e*i,i,i);for(let e=0;e<8;e++)for(let t=0;t<8;t++){const o=n.board[e][t];if(!o)continue;const s=o===o.toUpperCase()?"w":"b",r=s+o.toUpperCase();if(pieceImages[r]&&pieceImages[r].width>0){const n=(i-32)/2;a.drawImage(pieceImages[r],t*i+n,e*i+n,32,32)}else a.textAlign="center",a.textBaseline="middle",a.font=.6*i+"px serif",a.fillStyle="w"===s?"#fff":"#000",a.fillText(glyphs[o]||o,t*i+i/2,e*i+i/2)}}function makeAIMoveInTournament(e){const t=tournamentGames[e];t.paused||t.gameOver||tournamentWorkers[e].postMessage({type:"getMove",data:{depth:2}})}function isGameOver(e){return 0===e.generateLegalMoves(e.state).length||(e.isThreefoldRepetition()||e.isFiftyMoveDraw()||e.isInsufficientMaterial())}function getGameResult(e){if(e.generateLegalMoves(e.state).length>0)return e.isThreefoldRepetition()?"Draw by repetition":e.isFiftyMoveDraw()?"Draw by 50-move rule":e.isInsufficientMaterial()?"Draw by insufficient material":"Game in progress";const t=e.findKing(e.state,e.state.activeColor);if(!t)return"Invalid position";return e.isSquareAttacked(e.state,t[0],t[1],oppositeColor(e.state.activeColor))?`Checkmate - ${"w"===e.state.activeColor?"Black":"White"} wins`:"Stalemate"}function stopTournament(){tournamentWorkers.forEach((e=>e.terminate())),tournamentWorkers=[],tournamentGames=[],tournamentMode=!1,location.reload()}function togglePauseTournament(){const e=document.getElementById("btnPauseTournament"),t=tournamentGames.every((e=>e.paused));tournamentGames.forEach((e=>{e.paused=!t,t&&!e.gameOver&&makeAIMoveInTournament(tournamentGames.indexOf(e))})),e.textContent=t?"Pause":"Resume"}document.getElementById("btnTournament").addEventListener("click",(function(){startTournamentMode(null)}));
